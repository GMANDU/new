#include <stdio.h>

// 배열에서 가장 큰 숫자를 찾습니다.
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 주어진 자리수를 기준으로 배열을 정렬합니다.
void countingSort(int arr[], int n, int exp) {
    int output[n]; // 정렬된 결과를 저장할 배열
    int count[10] = {0}; // 0~9까지 숫자의 개수를 셉니다.

    // 현재 자리수(exp)에 해당하는 숫자의 개수를 셉니다.
    for (int i = 0; i < n; i++) {
        int digit = (arr[i] / exp) % 10;
        count[digit]++;
    }

    // count[i]에 실제 위치를 저장합니다.
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    // output 배열에 정렬된 결과를 저장합니다.
    for (int i = n - 1; i >= 0; i--) {
        int digit = (arr[i] / exp) % 10;
        output[count[digit] - 1] = arr[i];
        count[digit]--;
    }

    // output 배열의 결과를 arr에 복사합니다.
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

// 기수 정렬 함수입니다.
void radixSort(int arr[], int n) {
    int max = getMax(arr, n); // 배열에서 가장 큰 숫자를 찾습니다.

    // 1의 자리, 10의 자리, 100의 자리 순서로 정렬합니다.
    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, n, exp);
    }
}

// 배열을 출력하는 함수입니다.
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {170, 45, 75, 90, 802, 24, 2, 66};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("정렬 전 배열: \n");
    printArray(arr, n);

    radixSort(arr, n);

    printf("정렬 후 배열: \n");
    printArray(arr, n);

    return 0;
}
